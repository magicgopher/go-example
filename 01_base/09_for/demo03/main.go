package main

import "fmt"

func main() {
	/*
		for嵌套语法格式：
			for [初始化语句1; 条件表达式1; 后置语句1] {
				for [初始化语句2; 条件表达式2; 后置语句2] {
					// 循环体
				}
			}

		嵌套循环指的是在一个循环语句内部包含另一个循环语句。
		Go 语言中的 for 循环可以进行嵌套，嵌套层数没有限制。
		外层循环和内层循环的语法格式与普通的 for 循环相同。
		当执行到嵌套循环时，先执行外层循环的初始化语句1，然后判断条件表达式1是否为真。如果为真，则进入外层循环的循环体。
		在外层循环的循环体内部，执行内层循环的初始化语句2，然后判断条件表达式2是否为真。如果为真，则进入内层循环的循环体。
		内层循环执行完毕后，执行内层循环的后置语句2，然后再次判断条件表达式2。如果为真，则继续执行内层循环，否则退出内层循环。
		当内层循环执行完毕或者条件表达式2为假时，执行外层循环的后置语句1，然后再次判断条件表达式1。如果为真，则继续执行外层循环，否则退出外层循环。
	*/

	for i := 0; i < 3; i++ {
		for j := 0; j < 2; j++ {
			fmt.Println(i, j)
		}
	}
}
